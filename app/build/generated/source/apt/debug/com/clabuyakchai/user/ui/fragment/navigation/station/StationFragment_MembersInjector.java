// Generated by Dagger (https://google.github.io/dagger).
package com.clabuyakchai.user.ui.fragment.navigation.station;

import android.content.Context;
import androidx.fragment.app.Fragment;
import com.clabuyakchai.user.ui.base.BaseFragment_MembersInjector;
import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import javax.inject.Provider;

public final class StationFragment_MembersInjector implements MembersInjector<StationFragment> {
  private final Provider<DispatchingAndroidInjector<Fragment>>
      fragmentDispatchingAndroidInjectorProvider;

  private final Provider<Context> contextProvider;

  private final Provider<StationPresenter> presenterProvider;

  public StationFragment_MembersInjector(
      Provider<DispatchingAndroidInjector<Fragment>> fragmentDispatchingAndroidInjectorProvider,
      Provider<Context> contextProvider,
      Provider<StationPresenter> presenterProvider) {
    this.fragmentDispatchingAndroidInjectorProvider = fragmentDispatchingAndroidInjectorProvider;
    this.contextProvider = contextProvider;
    this.presenterProvider = presenterProvider;
  }

  public static MembersInjector<StationFragment> create(
      Provider<DispatchingAndroidInjector<Fragment>> fragmentDispatchingAndroidInjectorProvider,
      Provider<Context> contextProvider,
      Provider<StationPresenter> presenterProvider) {
    return new StationFragment_MembersInjector(
        fragmentDispatchingAndroidInjectorProvider, contextProvider, presenterProvider);
  }

  @Override
  public void injectMembers(StationFragment instance) {
    BaseFragment_MembersInjector.injectFragmentDispatchingAndroidInjector(
        instance, fragmentDispatchingAndroidInjectorProvider.get());
    injectContext(instance, contextProvider.get());
    injectPresenter(instance, presenterProvider.get());
  }

  public static void injectContext(StationFragment instance, Context context) {
    instance.context = context;
  }

  public static void injectPresenter(StationFragment instance, StationPresenter presenter) {
    instance.presenter = presenter;
  }
}
