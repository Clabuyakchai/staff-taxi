// Generated by Dagger (https://google.github.io/dagger).
package com.clabuyakchai.user.di.module;

import com.clabuyakchai.user.util.MyServiceInterceptor;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class RemoteModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final RemoteModule module;

  private final Provider<MyServiceInterceptor> myServiceInterceptorProvider;

  public RemoteModule_ProvideOkHttpClientFactory(
      RemoteModule module, Provider<MyServiceInterceptor> myServiceInterceptorProvider) {
    this.module = module;
    this.myServiceInterceptorProvider = myServiceInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return proxyProvideOkHttpClient(module, myServiceInterceptorProvider.get());
  }

  public static RemoteModule_ProvideOkHttpClientFactory create(
      RemoteModule module, Provider<MyServiceInterceptor> myServiceInterceptorProvider) {
    return new RemoteModule_ProvideOkHttpClientFactory(module, myServiceInterceptorProvider);
  }

  public static OkHttpClient proxyProvideOkHttpClient(
      RemoteModule instance, MyServiceInterceptor myServiceInterceptor) {
    return Preconditions.checkNotNull(
        instance.provideOkHttpClient(myServiceInterceptor),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
