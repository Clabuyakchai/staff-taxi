// Generated by Dagger (https://google.github.io/dagger).
package com.clabuyakchai.staff.ui.activity.navigation;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ru.terrakok.cicerone.Cicerone;
import ru.terrakok.cicerone.NavigatorHolder;
import ru.terrakok.cicerone.Router;

public final class CiceroneModule_ProvideNavigatorHolderFactory
    implements Factory<NavigatorHolder> {
  private final CiceroneModule module;

  private final Provider<Cicerone<Router>> ciceroneProvider;

  public CiceroneModule_ProvideNavigatorHolderFactory(
      CiceroneModule module, Provider<Cicerone<Router>> ciceroneProvider) {
    this.module = module;
    this.ciceroneProvider = ciceroneProvider;
  }

  @Override
  public NavigatorHolder get() {
    return proxyProvideNavigatorHolder(module, ciceroneProvider.get());
  }

  public static CiceroneModule_ProvideNavigatorHolderFactory create(
      CiceroneModule module, Provider<Cicerone<Router>> ciceroneProvider) {
    return new CiceroneModule_ProvideNavigatorHolderFactory(module, ciceroneProvider);
  }

  public static NavigatorHolder proxyProvideNavigatorHolder(
      CiceroneModule instance, Cicerone<Router> cicerone) {
    return Preconditions.checkNotNull(
        instance.provideNavigatorHolder(cicerone),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
