// Generated by Dagger (https://google.github.io/dagger).
package com.clabuyakchai.user.di.component;

import android.app.Activity;
import android.app.Fragment;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import android.content.Context;
import com.clabuyakchai.user.App;
import com.clabuyakchai.user.data.local.AppDatabase;
import com.clabuyakchai.user.data.remote.StaffApi;
import com.clabuyakchai.user.data.repository.AuthRepository;
import com.clabuyakchai.user.data.repository.BookRepository;
import com.clabuyakchai.user.data.repository.HomeRepository;
import com.clabuyakchai.user.data.repository.Impl.AuthRepositoryImpl;
import com.clabuyakchai.user.data.repository.Impl.AuthRepositoryImpl_Factory;
import com.clabuyakchai.user.data.repository.Impl.BookRepositoryImpl;
import com.clabuyakchai.user.data.repository.Impl.BookRepositoryImpl_Factory;
import com.clabuyakchai.user.data.repository.Impl.HomeRepositoryImpl;
import com.clabuyakchai.user.data.repository.Impl.HomeRepositoryImpl_Factory;
import com.clabuyakchai.user.data.repository.Impl.RouteRepositoryImpl;
import com.clabuyakchai.user.data.repository.Impl.RouteRepositoryImpl_Factory;
import com.clabuyakchai.user.data.repository.Impl.StationRepositoryImpl;
import com.clabuyakchai.user.data.repository.Impl.StationRepositoryImpl_Factory;
import com.clabuyakchai.user.data.repository.RouteRepository;
import com.clabuyakchai.user.data.repository.StationRepository;
import com.clabuyakchai.user.di.module.ActivityModule_BindLoginActivity;
import com.clabuyakchai.user.di.module.ActivityModule_BindNavActivity;
import com.clabuyakchai.user.di.module.CiceroneModule;
import com.clabuyakchai.user.di.module.CiceroneModule_ProvideCiceroneFactory;
import com.clabuyakchai.user.di.module.CiceroneModule_ProvideLocalCiceroneHolderFactory;
import com.clabuyakchai.user.di.module.CiceroneModule_ProvideNavigatorHolderFactory;
import com.clabuyakchai.user.di.module.CiceroneModule_ProvideRouterFactory;
import com.clabuyakchai.user.di.module.DatabaseModule;
import com.clabuyakchai.user.di.module.DatabaseModule_ProvideAppDatabaseFactory;
import com.clabuyakchai.user.di.module.FirebaseModule;
import com.clabuyakchai.user.di.module.FirebaseModule_ProvideFirebaseAuthFactory;
import com.clabuyakchai.user.di.module.FirebaseModule_ProvidePhoneAuthProviderFactory;
import com.clabuyakchai.user.di.module.RemoteModule;
import com.clabuyakchai.user.di.module.RemoteModule_ProvideOkHttpClientFactory;
import com.clabuyakchai.user.di.module.RemoteModule_ProvideRetrofitFactory;
import com.clabuyakchai.user.di.module.RemoteModule_ProvideStaffApiFactory;
import com.clabuyakchai.user.ui.activity.FragmentStack;
import com.clabuyakchai.user.ui.activity.auth.AuthActivity;
import com.clabuyakchai.user.ui.activity.auth.AuthActivityModule_ProvideAuthCodePresenterFactory;
import com.clabuyakchai.user.ui.activity.auth.AuthActivityModule_ProvideAuthPhonePresenterImplFactory;
import com.clabuyakchai.user.ui.activity.auth.AuthActivityModule_ProvideRegistrationPresenterFactory;
import com.clabuyakchai.user.ui.activity.navigation.NavigationActivity;
import com.clabuyakchai.user.ui.activity.navigation.NavigationActivityModule;
import com.clabuyakchai.user.ui.activity.navigation.NavigationActivityModule_ProvideBusPresenterFactory;
import com.clabuyakchai.user.ui.activity.navigation.NavigationActivityModule_ProvideHomePresenterFactory;
import com.clabuyakchai.user.ui.activity.navigation.NavigationActivityModule_ProvideNewRoutePresenterFactory;
import com.clabuyakchai.user.ui.activity.navigation.NavigationActivityModule_ProvideRouteDetailPresenterFactory;
import com.clabuyakchai.user.ui.activity.navigation.NavigationActivityModule_ProvideRoutePresenterFactory;
import com.clabuyakchai.user.ui.activity.navigation.NavigationActivityModule_ProvideTicketPresenterFactory;
import com.clabuyakchai.user.ui.activity.navigation.NavigationActivityPresenter;
import com.clabuyakchai.user.ui.activity.navigation.NavigationActivity_MembersInjector;
import com.clabuyakchai.user.ui.base.BaseActivity_MembersInjector;
import com.clabuyakchai.user.ui.base.BaseFragment_MembersInjector;
import com.clabuyakchai.user.ui.fragment.auth.code.AuthCodeFragment;
import com.clabuyakchai.user.ui.fragment.auth.code.AuthCodeFragmentProvider_BindAuthCodeFragment;
import com.clabuyakchai.user.ui.fragment.auth.code.AuthCodeFragment_MembersInjector;
import com.clabuyakchai.user.ui.fragment.auth.code.AuthCodePresenter;
import com.clabuyakchai.user.ui.fragment.auth.phone.AuthPhoneFragment;
import com.clabuyakchai.user.ui.fragment.auth.phone.AuthPhoneFragmentProvider_BindLoginFragment;
import com.clabuyakchai.user.ui.fragment.auth.phone.AuthPhoneFragment_MembersInjector;
import com.clabuyakchai.user.ui.fragment.auth.phone.AuthPhonePresenter;
import com.clabuyakchai.user.ui.fragment.auth.registration.RegistrationFragment;
import com.clabuyakchai.user.ui.fragment.auth.registration.RegistrationFragmentProvider_BindRegistrationFragment;
import com.clabuyakchai.user.ui.fragment.auth.registration.RegistrationFragment_MembersInjector;
import com.clabuyakchai.user.ui.fragment.auth.registration.RegistrationPresenter;
import com.clabuyakchai.user.ui.fragment.navigation.book.BookFragment;
import com.clabuyakchai.user.ui.fragment.navigation.book.BookFragmentProvider_BindMyRouteFragment;
import com.clabuyakchai.user.ui.fragment.navigation.book.BookFragment_MembersInjector;
import com.clabuyakchai.user.ui.fragment.navigation.book.BookPresenter;
import com.clabuyakchai.user.ui.fragment.navigation.bookdetail.BookDetailFragment;
import com.clabuyakchai.user.ui.fragment.navigation.bookdetail.BookDetailFragmentProvider_BindBookDetailFragment;
import com.clabuyakchai.user.ui.fragment.navigation.bookdetail.BookDetailFragment_MembersInjector;
import com.clabuyakchai.user.ui.fragment.navigation.bookdetail.BookDetailPresenter;
import com.clabuyakchai.user.ui.fragment.navigation.bus.BusFragment;
import com.clabuyakchai.user.ui.fragment.navigation.bus.BusFragmentProvider_BindBusFragment;
import com.clabuyakchai.user.ui.fragment.navigation.bus.BusFragment_MembersInjector;
import com.clabuyakchai.user.ui.fragment.navigation.bus.BusPresenter;
import com.clabuyakchai.user.ui.fragment.navigation.home.HomeFragment;
import com.clabuyakchai.user.ui.fragment.navigation.home.HomeFragmentProvider_BindHomeFragment;
import com.clabuyakchai.user.ui.fragment.navigation.home.HomeFragment_MembersInjector;
import com.clabuyakchai.user.ui.fragment.navigation.home.HomePresenter;
import com.clabuyakchai.user.ui.fragment.navigation.newroute.NewRouteFragment;
import com.clabuyakchai.user.ui.fragment.navigation.newroute.NewRouteFragmentProvider_BindNewRouteFragment;
import com.clabuyakchai.user.ui.fragment.navigation.newroute.NewRouteFragment_MembersInjector;
import com.clabuyakchai.user.ui.fragment.navigation.newroute.NewRoutePresenter;
import com.clabuyakchai.user.ui.fragment.navigation.route.RouteFragment;
import com.clabuyakchai.user.ui.fragment.navigation.route.RouteFragmentProvider_BindRouteFragment;
import com.clabuyakchai.user.ui.fragment.navigation.route.RouteFragment_MembersInjector;
import com.clabuyakchai.user.ui.fragment.navigation.route.RoutePresenter;
import com.clabuyakchai.user.ui.fragment.navigation.routedetail.RouteDetailFragment;
import com.clabuyakchai.user.ui.fragment.navigation.routedetail.RouteDetailFragmentProvider_BindRouteDetailFragment;
import com.clabuyakchai.user.ui.fragment.navigation.routedetail.RouteDetailFragment_MembersInjector;
import com.clabuyakchai.user.ui.fragment.navigation.routedetail.RouteDetailPresenter;
import com.clabuyakchai.user.ui.fragment.navigation.station.StationFragment;
import com.clabuyakchai.user.ui.fragment.navigation.station.StationFragmentProvider_BindStationFragment;
import com.clabuyakchai.user.ui.fragment.navigation.station.StationFragment_MembersInjector;
import com.clabuyakchai.user.ui.fragment.navigation.station.StationPresenter;
import com.clabuyakchai.user.ui.fragment.navigation.ticket.TicketFragment;
import com.clabuyakchai.user.ui.fragment.navigation.ticket.TicketFragmentProvider_BindTicketFragment;
import com.clabuyakchai.user.ui.fragment.navigation.ticket.TicketFragment_MembersInjector;
import com.clabuyakchai.user.ui.fragment.navigation.ticket.TicketPresenter;
import com.clabuyakchai.user.ui.fragment.navigation.ticketdetail.TicketDetailFragment;
import com.clabuyakchai.user.ui.fragment.navigation.ticketdetail.TicketDetailFragmentProvider_BindTicketDetailFragment;
import com.clabuyakchai.user.ui.fragment.navigation.ticketdetail.TicketDetailFragment_MembersInjector;
import com.clabuyakchai.user.ui.fragment.navigation.ticketdetail.TicketDetailPresenter;
import com.clabuyakchai.user.ui.fragment.tab.LocalCiceroneHolder;
import com.clabuyakchai.user.ui.fragment.tab.TabNavigationFragment;
import com.clabuyakchai.user.ui.fragment.tab.TabNavigationFragmentProvider_BindTabNavigationFragment;
import com.clabuyakchai.user.ui.fragment.tab.TabNavigationFragment_MembersInjector;
import com.clabuyakchai.user.util.MyServiceInterceptor;
import com.clabuyakchai.user.util.MyServiceInterceptor_Factory;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.PhoneAuthProvider;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import ru.terrakok.cicerone.Cicerone;
import ru.terrakok.cicerone.NavigatorHolder;
import ru.terrakok.cicerone.Router;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityModule_BindLoginActivity.AuthActivitySubcomponent.Builder>
      authActivitySubcomponentBuilderProvider;

  private Provider<ActivityModule_BindNavActivity.NavigationActivitySubcomponent.Builder>
      navigationActivitySubcomponentBuilderProvider;

  private Provider<FirebaseAuth> provideFirebaseAuthProvider;

  private Provider<PhoneAuthProvider> providePhoneAuthProvider;

  private Provider<App> seedInstanceProvider;

  private Provider<Context> bindContextProvider;

  private Provider<MyServiceInterceptor> myServiceInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<StaffApi> provideStaffApiProvider;

  private Provider<AuthRepositoryImpl> authRepositoryImplProvider;

  private Provider<AuthRepository> bindAuthRepositoryProvider;

  private Provider<AppDatabase> provideAppDatabaseProvider;

  private Provider<HomeRepositoryImpl> homeRepositoryImplProvider;

  private Provider<HomeRepository> bindHomeRepositoryProvider;

  private Provider<RouteRepositoryImpl> routeRepositoryImplProvider;

  private Provider<RouteRepository> bindRouteRepositoryProvider;

  private Provider<StationRepositoryImpl> stationRepositoryImplProvider;

  private Provider<StationRepository> bindStationRepositoryProvider;

  private Provider<BookRepositoryImpl> bookRepositoryImplProvider;

  private Provider<BookRepository> bindBookRepositoryProvider;

  private DaggerAppComponent(
      FirebaseModule firebaseModuleParam,
      RemoteModule remoteModuleParam,
      DatabaseModule databaseModuleParam,
      App seedInstanceParam) {

    initialize(firebaseModuleParam, remoteModuleParam, databaseModuleParam, seedInstanceParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(2)
        .put(AuthActivity.class, (Provider) authActivitySubcomponentBuilderProvider)
        .put(NavigationActivity.class, (Provider) navigationActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
      getDispatchingAndroidInjectorOfFragment2() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(
      final FirebaseModule firebaseModuleParam,
      final RemoteModule remoteModuleParam,
      final DatabaseModule databaseModuleParam,
      final App seedInstanceParam) {
    this.authActivitySubcomponentBuilderProvider =
        new Provider<ActivityModule_BindLoginActivity.AuthActivitySubcomponent.Builder>() {
          @Override
          public ActivityModule_BindLoginActivity.AuthActivitySubcomponent.Builder get() {
            return new AuthActivitySubcomponentBuilder();
          }
        };
    this.navigationActivitySubcomponentBuilderProvider =
        new Provider<ActivityModule_BindNavActivity.NavigationActivitySubcomponent.Builder>() {
          @Override
          public ActivityModule_BindNavActivity.NavigationActivitySubcomponent.Builder get() {
            return new NavigationActivitySubcomponentBuilder();
          }
        };
    this.provideFirebaseAuthProvider =
        DoubleCheck.provider(FirebaseModule_ProvideFirebaseAuthFactory.create(firebaseModuleParam));
    this.providePhoneAuthProvider =
        DoubleCheck.provider(
            FirebaseModule_ProvidePhoneAuthProviderFactory.create(firebaseModuleParam));
    this.seedInstanceProvider = InstanceFactory.create(seedInstanceParam);
    this.bindContextProvider = DoubleCheck.provider((Provider) seedInstanceProvider);
    this.myServiceInterceptorProvider =
        DoubleCheck.provider(MyServiceInterceptor_Factory.create(bindContextProvider));
    this.provideOkHttpClientProvider =
        DoubleCheck.provider(
            RemoteModule_ProvideOkHttpClientFactory.create(
                remoteModuleParam, myServiceInterceptorProvider));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            RemoteModule_ProvideRetrofitFactory.create(
                remoteModuleParam, provideOkHttpClientProvider));
    this.provideStaffApiProvider =
        DoubleCheck.provider(
            RemoteModule_ProvideStaffApiFactory.create(remoteModuleParam, provideRetrofitProvider));
    this.authRepositoryImplProvider =
        AuthRepositoryImpl_Factory.create(
            provideFirebaseAuthProvider, providePhoneAuthProvider, provideStaffApiProvider);
    this.bindAuthRepositoryProvider = DoubleCheck.provider((Provider) authRepositoryImplProvider);
    this.provideAppDatabaseProvider =
        DoubleCheck.provider(
            DatabaseModule_ProvideAppDatabaseFactory.create(
                databaseModuleParam, bindContextProvider));
    this.homeRepositoryImplProvider =
        HomeRepositoryImpl_Factory.create(provideStaffApiProvider, provideAppDatabaseProvider);
    this.bindHomeRepositoryProvider = DoubleCheck.provider((Provider) homeRepositoryImplProvider);
    this.routeRepositoryImplProvider =
        RouteRepositoryImpl_Factory.create(provideStaffApiProvider, provideAppDatabaseProvider);
    this.bindRouteRepositoryProvider = DoubleCheck.provider((Provider) routeRepositoryImplProvider);
    this.stationRepositoryImplProvider =
        StationRepositoryImpl_Factory.create(provideStaffApiProvider);
    this.bindStationRepositoryProvider =
        DoubleCheck.provider((Provider) stationRepositoryImplProvider);
    this.bookRepositoryImplProvider =
        BookRepositoryImpl_Factory.create(provideStaffApiProvider, provideAppDatabaseProvider);
    this.bindBookRepositoryProvider = DoubleCheck.provider((Provider) bookRepositoryImplProvider);
  }

  @Override
  public void inject(App arg0) {
    injectApp(arg0);
  }

  private App injectApp(App instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    dagger.android.support.DaggerApplication_MembersInjector.injectSupportFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment2());
    return instance;
  }

  private static final class Builder extends AppComponent.Builder {
    private FirebaseModule firebaseModule;

    private RemoteModule remoteModule;

    private DatabaseModule databaseModule;

    private App seedInstance;

    @Override
    public void seedInstance(App arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public AppComponent build() {
      if (firebaseModule == null) {
        this.firebaseModule = new FirebaseModule();
      }
      if (remoteModule == null) {
        this.remoteModule = new RemoteModule();
      }
      if (databaseModule == null) {
        this.databaseModule = new DatabaseModule();
      }
      Preconditions.checkBuilderRequirement(seedInstance, App.class);
      return new DaggerAppComponent(firebaseModule, remoteModule, databaseModule, seedInstance);
    }
  }

  private final class AuthActivitySubcomponentBuilder
      extends ActivityModule_BindLoginActivity.AuthActivitySubcomponent.Builder {
    private AuthActivity seedInstance;

    @Override
    public void seedInstance(AuthActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public ActivityModule_BindLoginActivity.AuthActivitySubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, AuthActivity.class);
      return new AuthActivitySubcomponentImpl(seedInstance);
    }
  }

  private final class AuthActivitySubcomponentImpl
      implements ActivityModule_BindLoginActivity.AuthActivitySubcomponent {
    private Provider<
            AuthPhoneFragmentProvider_BindLoginFragment.AuthPhoneFragmentSubcomponent.Builder>
        authPhoneFragmentSubcomponentBuilderProvider;

    private Provider<
            AuthCodeFragmentProvider_BindAuthCodeFragment.AuthCodeFragmentSubcomponent.Builder>
        authCodeFragmentSubcomponentBuilderProvider;

    private Provider<
            RegistrationFragmentProvider_BindRegistrationFragment.RegistrationFragmentSubcomponent
                .Builder>
        registrationFragmentSubcomponentBuilderProvider;

    private Provider<AuthPhonePresenter> provideAuthPhonePresenterImplProvider;

    private Provider<AuthActivity> seedInstanceProvider;

    private Provider<FragmentStack> bindFragmentStackProvider;

    private Provider<AuthCodePresenter> provideAuthCodePresenterProvider;

    private Provider<RegistrationPresenter> provideRegistrationPresenterProvider;

    private AuthActivitySubcomponentImpl(AuthActivity seedInstanceParam) {

      initialize(seedInstanceParam);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(5)
          .put(
              AuthActivity.class,
              (Provider) DaggerAppComponent.this.authActivitySubcomponentBuilderProvider)
          .put(
              NavigationActivity.class,
              (Provider) DaggerAppComponent.this.navigationActivitySubcomponentBuilderProvider)
          .put(AuthPhoneFragment.class, (Provider) authPhoneFragmentSubcomponentBuilderProvider)
          .put(AuthCodeFragment.class, (Provider) authCodeFragmentSubcomponentBuilderProvider)
          .put(
              RegistrationFragment.class,
              (Provider) registrationFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment2() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AuthActivity seedInstanceParam) {
      this.authPhoneFragmentSubcomponentBuilderProvider =
          new Provider<
              AuthPhoneFragmentProvider_BindLoginFragment.AuthPhoneFragmentSubcomponent.Builder>() {
            @Override
            public AuthPhoneFragmentProvider_BindLoginFragment.AuthPhoneFragmentSubcomponent.Builder
                get() {
              return new AuthPhoneFragmentSubcomponentBuilder();
            }
          };
      this.authCodeFragmentSubcomponentBuilderProvider =
          new Provider<
              AuthCodeFragmentProvider_BindAuthCodeFragment.AuthCodeFragmentSubcomponent
                  .Builder>() {
            @Override
            public AuthCodeFragmentProvider_BindAuthCodeFragment.AuthCodeFragmentSubcomponent
                    .Builder
                get() {
              return new AuthCodeFragmentSubcomponentBuilder();
            }
          };
      this.registrationFragmentSubcomponentBuilderProvider =
          new Provider<
              RegistrationFragmentProvider_BindRegistrationFragment.RegistrationFragmentSubcomponent
                  .Builder>() {
            @Override
            public RegistrationFragmentProvider_BindRegistrationFragment
                    .RegistrationFragmentSubcomponent.Builder
                get() {
              return new RegistrationFragmentSubcomponentBuilder();
            }
          };
      this.provideAuthPhonePresenterImplProvider =
          DoubleCheck.provider(
              AuthActivityModule_ProvideAuthPhonePresenterImplFactory.create(
                  DaggerAppComponent.this.bindAuthRepositoryProvider));
      this.seedInstanceProvider = InstanceFactory.create(seedInstanceParam);
      this.bindFragmentStackProvider = DoubleCheck.provider((Provider) seedInstanceProvider);
      this.provideAuthCodePresenterProvider =
          DoubleCheck.provider(
              AuthActivityModule_ProvideAuthCodePresenterFactory.create(
                  DaggerAppComponent.this.bindAuthRepositoryProvider));
      this.provideRegistrationPresenterProvider =
          DoubleCheck.provider(
              AuthActivityModule_ProvideRegistrationPresenterFactory.create(
                  DaggerAppComponent.this.bindAuthRepositoryProvider));
    }

    @Override
    public void inject(AuthActivity arg0) {
      injectAuthActivity(arg0);
    }

    private AuthActivity injectAuthActivity(AuthActivity instance) {
      BaseActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment2());
      return instance;
    }

    private final class AuthPhoneFragmentSubcomponentBuilder
        extends AuthPhoneFragmentProvider_BindLoginFragment.AuthPhoneFragmentSubcomponent.Builder {
      private AuthPhoneFragment seedInstance;

      @Override
      public void seedInstance(AuthPhoneFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }

      @Override
      public AuthPhoneFragmentProvider_BindLoginFragment.AuthPhoneFragmentSubcomponent build() {
        Preconditions.checkBuilderRequirement(seedInstance, AuthPhoneFragment.class);
        return new AuthPhoneFragmentSubcomponentImpl(seedInstance);
      }
    }

    private final class AuthPhoneFragmentSubcomponentImpl
        implements AuthPhoneFragmentProvider_BindLoginFragment.AuthPhoneFragmentSubcomponent {
      private AuthPhoneFragmentSubcomponentImpl(AuthPhoneFragment seedInstance) {}

      @Override
      public void inject(AuthPhoneFragment arg0) {
        injectAuthPhoneFragment(arg0);
      }

      private AuthPhoneFragment injectAuthPhoneFragment(AuthPhoneFragment instance) {
        BaseFragment_MembersInjector.injectFragmentDispatchingAndroidInjector(
            instance, AuthActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        AuthPhoneFragment_MembersInjector.injectPresenter(
            instance,
            AuthActivitySubcomponentImpl.this.provideAuthPhonePresenterImplProvider.get());
        AuthPhoneFragment_MembersInjector.injectFragmentStack(
            instance, AuthActivitySubcomponentImpl.this.bindFragmentStackProvider.get());
        return instance;
      }
    }

    private final class AuthCodeFragmentSubcomponentBuilder
        extends AuthCodeFragmentProvider_BindAuthCodeFragment.AuthCodeFragmentSubcomponent.Builder {
      private AuthCodeFragment seedInstance;

      @Override
      public void seedInstance(AuthCodeFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }

      @Override
      public AuthCodeFragmentProvider_BindAuthCodeFragment.AuthCodeFragmentSubcomponent build() {
        Preconditions.checkBuilderRequirement(seedInstance, AuthCodeFragment.class);
        return new AuthCodeFragmentSubcomponentImpl(seedInstance);
      }
    }

    private final class AuthCodeFragmentSubcomponentImpl
        implements AuthCodeFragmentProvider_BindAuthCodeFragment.AuthCodeFragmentSubcomponent {
      private AuthCodeFragmentSubcomponentImpl(AuthCodeFragment seedInstance) {}

      @Override
      public void inject(AuthCodeFragment arg0) {
        injectAuthCodeFragment(arg0);
      }

      private AuthCodeFragment injectAuthCodeFragment(AuthCodeFragment instance) {
        BaseFragment_MembersInjector.injectFragmentDispatchingAndroidInjector(
            instance, AuthActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        AuthCodeFragment_MembersInjector.injectPresenter(
            instance, AuthActivitySubcomponentImpl.this.provideAuthCodePresenterProvider.get());
        AuthCodeFragment_MembersInjector.injectFragmentStack(
            instance, AuthActivitySubcomponentImpl.this.bindFragmentStackProvider.get());
        return instance;
      }
    }

    private final class RegistrationFragmentSubcomponentBuilder
        extends RegistrationFragmentProvider_BindRegistrationFragment
            .RegistrationFragmentSubcomponent.Builder {
      private RegistrationFragment seedInstance;

      @Override
      public void seedInstance(RegistrationFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }

      @Override
      public RegistrationFragmentProvider_BindRegistrationFragment.RegistrationFragmentSubcomponent
          build() {
        Preconditions.checkBuilderRequirement(seedInstance, RegistrationFragment.class);
        return new RegistrationFragmentSubcomponentImpl(seedInstance);
      }
    }

    private final class RegistrationFragmentSubcomponentImpl
        implements RegistrationFragmentProvider_BindRegistrationFragment
            .RegistrationFragmentSubcomponent {
      private RegistrationFragmentSubcomponentImpl(RegistrationFragment seedInstance) {}

      @Override
      public void inject(RegistrationFragment arg0) {
        injectRegistrationFragment(arg0);
      }

      private RegistrationFragment injectRegistrationFragment(RegistrationFragment instance) {
        BaseFragment_MembersInjector.injectFragmentDispatchingAndroidInjector(
            instance, AuthActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        RegistrationFragment_MembersInjector.injectPresenter(
            instance, AuthActivitySubcomponentImpl.this.provideRegistrationPresenterProvider.get());
        return instance;
      }
    }
  }

  private final class NavigationActivitySubcomponentBuilder
      extends ActivityModule_BindNavActivity.NavigationActivitySubcomponent.Builder {
    private CiceroneModule ciceroneModule;

    private NavigationActivityModule navigationActivityModule;

    private NavigationActivity seedInstance;

    @Override
    public void seedInstance(NavigationActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public ActivityModule_BindNavActivity.NavigationActivitySubcomponent build() {
      if (ciceroneModule == null) {
        this.ciceroneModule = new CiceroneModule();
      }
      if (navigationActivityModule == null) {
        this.navigationActivityModule = new NavigationActivityModule();
      }
      Preconditions.checkBuilderRequirement(seedInstance, NavigationActivity.class);
      return new NavigationActivitySubcomponentImpl(
          ciceroneModule, navigationActivityModule, seedInstance);
    }
  }

  private final class NavigationActivitySubcomponentImpl
      implements ActivityModule_BindNavActivity.NavigationActivitySubcomponent {
    private Provider<HomeFragmentProvider_BindHomeFragment.HomeFragmentSubcomponent.Builder>
        homeFragmentSubcomponentBuilderProvider;

    private Provider<RouteFragmentProvider_BindRouteFragment.RouteFragmentSubcomponent.Builder>
        routeFragmentSubcomponentBuilderProvider;

    private Provider<
            RouteDetailFragmentProvider_BindRouteDetailFragment.RouteDetailFragmentSubcomponent
                .Builder>
        routeDetailFragmentSubcomponentBuilderProvider;

    private Provider<
            TabNavigationFragmentProvider_BindTabNavigationFragment
                .TabNavigationFragmentSubcomponent.Builder>
        tabNavigationFragmentSubcomponentBuilderProvider;

    private Provider<
            StationFragmentProvider_BindStationFragment.StationFragmentSubcomponent.Builder>
        stationFragmentSubcomponentBuilderProvider;

    private Provider<BusFragmentProvider_BindBusFragment.BusFragmentSubcomponent.Builder>
        busFragmentSubcomponentBuilderProvider;

    private Provider<
            NewRouteFragmentProvider_BindNewRouteFragment.NewRouteFragmentSubcomponent.Builder>
        newRouteFragmentSubcomponentBuilderProvider;

    private Provider<BookFragmentProvider_BindMyRouteFragment.BookFragmentSubcomponent.Builder>
        bookFragmentSubcomponentBuilderProvider;

    private Provider<
            BookDetailFragmentProvider_BindBookDetailFragment.BookDetailFragmentSubcomponent
                .Builder>
        bookDetailFragmentSubcomponentBuilderProvider;

    private Provider<TicketFragmentProvider_BindTicketFragment.TicketFragmentSubcomponent.Builder>
        ticketFragmentSubcomponentBuilderProvider;

    private Provider<
            TicketDetailFragmentProvider_BindTicketDetailFragment.TicketDetailFragmentSubcomponent
                .Builder>
        ticketDetailFragmentSubcomponentBuilderProvider;

    private Provider<Cicerone<Router>> provideCiceroneProvider;

    private Provider<NavigatorHolder> provideNavigatorHolderProvider;

    private Provider<Router> provideRouterProvider;

    private Provider<LocalCiceroneHolder> provideLocalCiceroneHolderProvider;

    private Provider<HomePresenter> provideHomePresenterProvider;

    private Provider<RoutePresenter> provideRoutePresenterProvider;

    private Provider<RouteDetailPresenter> provideRouteDetailPresenterProvider;

    private Provider<BusPresenter> provideBusPresenterProvider;

    private Provider<NewRoutePresenter> provideNewRoutePresenterProvider;

    private Provider<TicketPresenter> provideTicketPresenterProvider;

    private NavigationActivitySubcomponentImpl(
        CiceroneModule ciceroneModuleParam,
        NavigationActivityModule navigationActivityModuleParam,
        NavigationActivity seedInstance) {

      initialize(ciceroneModuleParam, navigationActivityModuleParam, seedInstance);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(13)
          .put(
              AuthActivity.class,
              (Provider) DaggerAppComponent.this.authActivitySubcomponentBuilderProvider)
          .put(
              NavigationActivity.class,
              (Provider) DaggerAppComponent.this.navigationActivitySubcomponentBuilderProvider)
          .put(HomeFragment.class, (Provider) homeFragmentSubcomponentBuilderProvider)
          .put(RouteFragment.class, (Provider) routeFragmentSubcomponentBuilderProvider)
          .put(RouteDetailFragment.class, (Provider) routeDetailFragmentSubcomponentBuilderProvider)
          .put(
              TabNavigationFragment.class,
              (Provider) tabNavigationFragmentSubcomponentBuilderProvider)
          .put(StationFragment.class, (Provider) stationFragmentSubcomponentBuilderProvider)
          .put(BusFragment.class, (Provider) busFragmentSubcomponentBuilderProvider)
          .put(NewRouteFragment.class, (Provider) newRouteFragmentSubcomponentBuilderProvider)
          .put(BookFragment.class, (Provider) bookFragmentSubcomponentBuilderProvider)
          .put(BookDetailFragment.class, (Provider) bookDetailFragmentSubcomponentBuilderProvider)
          .put(TicketFragment.class, (Provider) ticketFragmentSubcomponentBuilderProvider)
          .put(
              TicketDetailFragment.class,
              (Provider) ticketDetailFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment2() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    private NavigationActivityPresenter getNavigationActivityPresenter() {
      return new NavigationActivityPresenter(
          DaggerAppComponent.this.bindHomeRepositoryProvider.get(), provideRouterProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(
        final CiceroneModule ciceroneModuleParam,
        final NavigationActivityModule navigationActivityModuleParam,
        final NavigationActivity seedInstance) {
      this.homeFragmentSubcomponentBuilderProvider =
          new Provider<HomeFragmentProvider_BindHomeFragment.HomeFragmentSubcomponent.Builder>() {
            @Override
            public HomeFragmentProvider_BindHomeFragment.HomeFragmentSubcomponent.Builder get() {
              return new HomeFragmentSubcomponentBuilder();
            }
          };
      this.routeFragmentSubcomponentBuilderProvider =
          new Provider<
              RouteFragmentProvider_BindRouteFragment.RouteFragmentSubcomponent.Builder>() {
            @Override
            public RouteFragmentProvider_BindRouteFragment.RouteFragmentSubcomponent.Builder get() {
              return new RouteFragmentSubcomponentBuilder();
            }
          };
      this.routeDetailFragmentSubcomponentBuilderProvider =
          new Provider<
              RouteDetailFragmentProvider_BindRouteDetailFragment.RouteDetailFragmentSubcomponent
                  .Builder>() {
            @Override
            public RouteDetailFragmentProvider_BindRouteDetailFragment
                    .RouteDetailFragmentSubcomponent.Builder
                get() {
              return new RouteDetailFragmentSubcomponentBuilder();
            }
          };
      this.tabNavigationFragmentSubcomponentBuilderProvider =
          new Provider<
              TabNavigationFragmentProvider_BindTabNavigationFragment
                  .TabNavigationFragmentSubcomponent.Builder>() {
            @Override
            public TabNavigationFragmentProvider_BindTabNavigationFragment
                    .TabNavigationFragmentSubcomponent.Builder
                get() {
              return new TabNavigationFragmentSubcomponentBuilder();
            }
          };
      this.stationFragmentSubcomponentBuilderProvider =
          new Provider<
              StationFragmentProvider_BindStationFragment.StationFragmentSubcomponent.Builder>() {
            @Override
            public StationFragmentProvider_BindStationFragment.StationFragmentSubcomponent.Builder
                get() {
              return new StationFragmentSubcomponentBuilder();
            }
          };
      this.busFragmentSubcomponentBuilderProvider =
          new Provider<BusFragmentProvider_BindBusFragment.BusFragmentSubcomponent.Builder>() {
            @Override
            public BusFragmentProvider_BindBusFragment.BusFragmentSubcomponent.Builder get() {
              return new BusFragmentSubcomponentBuilder();
            }
          };
      this.newRouteFragmentSubcomponentBuilderProvider =
          new Provider<
              NewRouteFragmentProvider_BindNewRouteFragment.NewRouteFragmentSubcomponent
                  .Builder>() {
            @Override
            public NewRouteFragmentProvider_BindNewRouteFragment.NewRouteFragmentSubcomponent
                    .Builder
                get() {
              return new NewRouteFragmentSubcomponentBuilder();
            }
          };
      this.bookFragmentSubcomponentBuilderProvider =
          new Provider<
              BookFragmentProvider_BindMyRouteFragment.BookFragmentSubcomponent.Builder>() {
            @Override
            public BookFragmentProvider_BindMyRouteFragment.BookFragmentSubcomponent.Builder get() {
              return new BookFragmentSubcomponentBuilder();
            }
          };
      this.bookDetailFragmentSubcomponentBuilderProvider =
          new Provider<
              BookDetailFragmentProvider_BindBookDetailFragment.BookDetailFragmentSubcomponent
                  .Builder>() {
            @Override
            public BookDetailFragmentProvider_BindBookDetailFragment.BookDetailFragmentSubcomponent
                    .Builder
                get() {
              return new BookDetailFragmentSubcomponentBuilder();
            }
          };
      this.ticketFragmentSubcomponentBuilderProvider =
          new Provider<
              TicketFragmentProvider_BindTicketFragment.TicketFragmentSubcomponent.Builder>() {
            @Override
            public TicketFragmentProvider_BindTicketFragment.TicketFragmentSubcomponent.Builder
                get() {
              return new TicketFragmentSubcomponentBuilder();
            }
          };
      this.ticketDetailFragmentSubcomponentBuilderProvider =
          new Provider<
              TicketDetailFragmentProvider_BindTicketDetailFragment.TicketDetailFragmentSubcomponent
                  .Builder>() {
            @Override
            public TicketDetailFragmentProvider_BindTicketDetailFragment
                    .TicketDetailFragmentSubcomponent.Builder
                get() {
              return new TicketDetailFragmentSubcomponentBuilder();
            }
          };
      this.provideCiceroneProvider =
          DoubleCheck.provider(CiceroneModule_ProvideCiceroneFactory.create(ciceroneModuleParam));
      this.provideNavigatorHolderProvider =
          DoubleCheck.provider(
              CiceroneModule_ProvideNavigatorHolderFactory.create(
                  ciceroneModuleParam, provideCiceroneProvider));
      this.provideRouterProvider =
          DoubleCheck.provider(
              CiceroneModule_ProvideRouterFactory.create(
                  ciceroneModuleParam, provideCiceroneProvider));
      this.provideLocalCiceroneHolderProvider =
          DoubleCheck.provider(
              CiceroneModule_ProvideLocalCiceroneHolderFactory.create(ciceroneModuleParam));
      this.provideHomePresenterProvider =
          DoubleCheck.provider(
              NavigationActivityModule_ProvideHomePresenterFactory.create(
                  navigationActivityModuleParam,
                  DaggerAppComponent.this.bindAuthRepositoryProvider,
                  DaggerAppComponent.this.bindHomeRepositoryProvider));
      this.provideRoutePresenterProvider =
          DoubleCheck.provider(
              NavigationActivityModule_ProvideRoutePresenterFactory.create(
                  navigationActivityModuleParam,
                  DaggerAppComponent.this.bindRouteRepositoryProvider));
      this.provideRouteDetailPresenterProvider =
          DoubleCheck.provider(
              NavigationActivityModule_ProvideRouteDetailPresenterFactory.create(
                  navigationActivityModuleParam,
                  DaggerAppComponent.this.bindRouteRepositoryProvider));
      this.provideBusPresenterProvider =
          DoubleCheck.provider(
              NavigationActivityModule_ProvideBusPresenterFactory.create(
                  navigationActivityModuleParam,
                  DaggerAppComponent.this.bindHomeRepositoryProvider));
      this.provideNewRoutePresenterProvider =
          DoubleCheck.provider(
              NavigationActivityModule_ProvideNewRoutePresenterFactory.create(
                  navigationActivityModuleParam,
                  DaggerAppComponent.this.bindStationRepositoryProvider,
                  DaggerAppComponent.this.bindRouteRepositoryProvider));
      this.provideTicketPresenterProvider =
          DoubleCheck.provider(
              NavigationActivityModule_ProvideTicketPresenterFactory.create(
                  navigationActivityModuleParam,
                  DaggerAppComponent.this.bindRouteRepositoryProvider));
    }

    @Override
    public void inject(NavigationActivity arg0) {
      injectNavigationActivity(arg0);
    }

    private NavigationActivity injectNavigationActivity(NavigationActivity instance) {
      BaseActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment2());
      NavigationActivity_MembersInjector.injectNavigatorHolder(
          instance, provideNavigatorHolderProvider.get());
      NavigationActivity_MembersInjector.injectPresenter(
          instance, getNavigationActivityPresenter());
      NavigationActivity_MembersInjector.injectRouter(instance, provideRouterProvider.get());
      return instance;
    }

    private final class HomeFragmentSubcomponentBuilder
        extends HomeFragmentProvider_BindHomeFragment.HomeFragmentSubcomponent.Builder {
      private HomeFragment seedInstance;

      @Override
      public void seedInstance(HomeFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }

      @Override
      public HomeFragmentProvider_BindHomeFragment.HomeFragmentSubcomponent build() {
        Preconditions.checkBuilderRequirement(seedInstance, HomeFragment.class);
        return new HomeFragmentSubcomponentImpl(seedInstance);
      }
    }

    private final class HomeFragmentSubcomponentImpl
        implements HomeFragmentProvider_BindHomeFragment.HomeFragmentSubcomponent {
      private HomeFragmentSubcomponentImpl(HomeFragment seedInstance) {}

      @Override
      public void inject(HomeFragment arg0) {
        injectHomeFragment(arg0);
      }

      private HomeFragment injectHomeFragment(HomeFragment instance) {
        BaseFragment_MembersInjector.injectFragmentDispatchingAndroidInjector(
            instance,
            NavigationActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        HomeFragment_MembersInjector.injectLocalCiceroneHolder(
            instance,
            NavigationActivitySubcomponentImpl.this.provideLocalCiceroneHolderProvider.get());
        HomeFragment_MembersInjector.injectPresenter(
            instance, NavigationActivitySubcomponentImpl.this.provideHomePresenterProvider.get());
        return instance;
      }
    }

    private final class RouteFragmentSubcomponentBuilder
        extends RouteFragmentProvider_BindRouteFragment.RouteFragmentSubcomponent.Builder {
      private RouteFragment seedInstance;

      @Override
      public void seedInstance(RouteFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }

      @Override
      public RouteFragmentProvider_BindRouteFragment.RouteFragmentSubcomponent build() {
        Preconditions.checkBuilderRequirement(seedInstance, RouteFragment.class);
        return new RouteFragmentSubcomponentImpl(seedInstance);
      }
    }

    private final class RouteFragmentSubcomponentImpl
        implements RouteFragmentProvider_BindRouteFragment.RouteFragmentSubcomponent {
      private RouteFragmentSubcomponentImpl(RouteFragment seedInstance) {}

      @Override
      public void inject(RouteFragment arg0) {
        injectRouteFragment(arg0);
      }

      private RouteFragment injectRouteFragment(RouteFragment instance) {
        BaseFragment_MembersInjector.injectFragmentDispatchingAndroidInjector(
            instance,
            NavigationActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        RouteFragment_MembersInjector.injectPresenter(
            instance, NavigationActivitySubcomponentImpl.this.provideRoutePresenterProvider.get());
        RouteFragment_MembersInjector.injectLocalCiceroneHolder(
            instance,
            NavigationActivitySubcomponentImpl.this.provideLocalCiceroneHolderProvider.get());
        return instance;
      }
    }

    private final class RouteDetailFragmentSubcomponentBuilder
        extends RouteDetailFragmentProvider_BindRouteDetailFragment.RouteDetailFragmentSubcomponent
            .Builder {
      private RouteDetailFragment seedInstance;

      @Override
      public void seedInstance(RouteDetailFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }

      @Override
      public RouteDetailFragmentProvider_BindRouteDetailFragment.RouteDetailFragmentSubcomponent
          build() {
        Preconditions.checkBuilderRequirement(seedInstance, RouteDetailFragment.class);
        return new RouteDetailFragmentSubcomponentImpl(seedInstance);
      }
    }

    private final class RouteDetailFragmentSubcomponentImpl
        implements RouteDetailFragmentProvider_BindRouteDetailFragment
            .RouteDetailFragmentSubcomponent {
      private RouteDetailFragmentSubcomponentImpl(RouteDetailFragment seedInstance) {}

      @Override
      public void inject(RouteDetailFragment arg0) {
        injectRouteDetailFragment(arg0);
      }

      private RouteDetailFragment injectRouteDetailFragment(RouteDetailFragment instance) {
        BaseFragment_MembersInjector.injectFragmentDispatchingAndroidInjector(
            instance,
            NavigationActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        RouteDetailFragment_MembersInjector.injectPresenter(
            instance,
            NavigationActivitySubcomponentImpl.this.provideRouteDetailPresenterProvider.get());
        RouteDetailFragment_MembersInjector.injectLocalCiceroneHolder(
            instance,
            NavigationActivitySubcomponentImpl.this.provideLocalCiceroneHolderProvider.get());
        return instance;
      }
    }

    private final class TabNavigationFragmentSubcomponentBuilder
        extends TabNavigationFragmentProvider_BindTabNavigationFragment
            .TabNavigationFragmentSubcomponent.Builder {
      private TabNavigationFragment seedInstance;

      @Override
      public void seedInstance(TabNavigationFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }

      @Override
      public TabNavigationFragmentProvider_BindTabNavigationFragment
              .TabNavigationFragmentSubcomponent
          build() {
        Preconditions.checkBuilderRequirement(seedInstance, TabNavigationFragment.class);
        return new TabNavigationFragmentSubcomponentImpl(seedInstance);
      }
    }

    private final class TabNavigationFragmentSubcomponentImpl
        implements TabNavigationFragmentProvider_BindTabNavigationFragment
            .TabNavigationFragmentSubcomponent {
      private TabNavigationFragmentSubcomponentImpl(TabNavigationFragment seedInstance) {}

      @Override
      public void inject(TabNavigationFragment arg0) {
        injectTabNavigationFragment(arg0);
      }

      private TabNavigationFragment injectTabNavigationFragment(TabNavigationFragment instance) {
        BaseFragment_MembersInjector.injectFragmentDispatchingAndroidInjector(
            instance,
            NavigationActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        TabNavigationFragment_MembersInjector.injectCiceroneHolder(
            instance,
            NavigationActivitySubcomponentImpl.this.provideLocalCiceroneHolderProvider.get());
        return instance;
      }
    }

    private final class StationFragmentSubcomponentBuilder
        extends StationFragmentProvider_BindStationFragment.StationFragmentSubcomponent.Builder {
      private StationFragment seedInstance;

      @Override
      public void seedInstance(StationFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }

      @Override
      public StationFragmentProvider_BindStationFragment.StationFragmentSubcomponent build() {
        Preconditions.checkBuilderRequirement(seedInstance, StationFragment.class);
        return new StationFragmentSubcomponentImpl(seedInstance);
      }
    }

    private final class StationFragmentSubcomponentImpl
        implements StationFragmentProvider_BindStationFragment.StationFragmentSubcomponent {
      private StationFragmentSubcomponentImpl(StationFragment seedInstance) {}

      private StationPresenter getStationPresenter() {
        return new StationPresenter(DaggerAppComponent.this.bindStationRepositoryProvider.get());
      }

      @Override
      public void inject(StationFragment arg0) {
        injectStationFragment(arg0);
      }

      private StationFragment injectStationFragment(StationFragment instance) {
        BaseFragment_MembersInjector.injectFragmentDispatchingAndroidInjector(
            instance,
            NavigationActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        StationFragment_MembersInjector.injectContext(
            instance, DaggerAppComponent.this.bindContextProvider.get());
        StationFragment_MembersInjector.injectPresenter(instance, getStationPresenter());
        return instance;
      }
    }

    private final class BusFragmentSubcomponentBuilder
        extends BusFragmentProvider_BindBusFragment.BusFragmentSubcomponent.Builder {
      private BusFragment seedInstance;

      @Override
      public void seedInstance(BusFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }

      @Override
      public BusFragmentProvider_BindBusFragment.BusFragmentSubcomponent build() {
        Preconditions.checkBuilderRequirement(seedInstance, BusFragment.class);
        return new BusFragmentSubcomponentImpl(seedInstance);
      }
    }

    private final class BusFragmentSubcomponentImpl
        implements BusFragmentProvider_BindBusFragment.BusFragmentSubcomponent {
      private BusFragmentSubcomponentImpl(BusFragment seedInstance) {}

      @Override
      public void inject(BusFragment arg0) {
        injectBusFragment(arg0);
      }

      private BusFragment injectBusFragment(BusFragment instance) {
        BaseFragment_MembersInjector.injectFragmentDispatchingAndroidInjector(
            instance,
            NavigationActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BusFragment_MembersInjector.injectPresenter(
            instance, NavigationActivitySubcomponentImpl.this.provideBusPresenterProvider.get());
        return instance;
      }
    }

    private final class NewRouteFragmentSubcomponentBuilder
        extends NewRouteFragmentProvider_BindNewRouteFragment.NewRouteFragmentSubcomponent.Builder {
      private NewRouteFragment seedInstance;

      @Override
      public void seedInstance(NewRouteFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }

      @Override
      public NewRouteFragmentProvider_BindNewRouteFragment.NewRouteFragmentSubcomponent build() {
        Preconditions.checkBuilderRequirement(seedInstance, NewRouteFragment.class);
        return new NewRouteFragmentSubcomponentImpl(seedInstance);
      }
    }

    private final class NewRouteFragmentSubcomponentImpl
        implements NewRouteFragmentProvider_BindNewRouteFragment.NewRouteFragmentSubcomponent {
      private NewRouteFragmentSubcomponentImpl(NewRouteFragment seedInstance) {}

      @Override
      public void inject(NewRouteFragment arg0) {
        injectNewRouteFragment(arg0);
      }

      private NewRouteFragment injectNewRouteFragment(NewRouteFragment instance) {
        BaseFragment_MembersInjector.injectFragmentDispatchingAndroidInjector(
            instance,
            NavigationActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        NewRouteFragment_MembersInjector.injectPresenter(
            instance,
            NavigationActivitySubcomponentImpl.this.provideNewRoutePresenterProvider.get());
        NewRouteFragment_MembersInjector.injectLocalCiceroneHolder(
            instance,
            NavigationActivitySubcomponentImpl.this.provideLocalCiceroneHolderProvider.get());
        return instance;
      }
    }

    private final class BookFragmentSubcomponentBuilder
        extends BookFragmentProvider_BindMyRouteFragment.BookFragmentSubcomponent.Builder {
      private BookFragment seedInstance;

      @Override
      public void seedInstance(BookFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }

      @Override
      public BookFragmentProvider_BindMyRouteFragment.BookFragmentSubcomponent build() {
        Preconditions.checkBuilderRequirement(seedInstance, BookFragment.class);
        return new BookFragmentSubcomponentImpl(seedInstance);
      }
    }

    private final class BookFragmentSubcomponentImpl
        implements BookFragmentProvider_BindMyRouteFragment.BookFragmentSubcomponent {
      private BookFragmentSubcomponentImpl(BookFragment seedInstance) {}

      private BookPresenter getBookPresenter() {
        return new BookPresenter(DaggerAppComponent.this.bindBookRepositoryProvider.get());
      }

      @Override
      public void inject(BookFragment arg0) {
        injectBookFragment(arg0);
      }

      private BookFragment injectBookFragment(BookFragment instance) {
        BaseFragment_MembersInjector.injectFragmentDispatchingAndroidInjector(
            instance,
            NavigationActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BookFragment_MembersInjector.injectPresenter(instance, getBookPresenter());
        BookFragment_MembersInjector.injectLocalCiceroneHolder(
            instance,
            NavigationActivitySubcomponentImpl.this.provideLocalCiceroneHolderProvider.get());
        return instance;
      }
    }

    private final class BookDetailFragmentSubcomponentBuilder
        extends BookDetailFragmentProvider_BindBookDetailFragment.BookDetailFragmentSubcomponent
            .Builder {
      private BookDetailFragment seedInstance;

      @Override
      public void seedInstance(BookDetailFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }

      @Override
      public BookDetailFragmentProvider_BindBookDetailFragment.BookDetailFragmentSubcomponent
          build() {
        Preconditions.checkBuilderRequirement(seedInstance, BookDetailFragment.class);
        return new BookDetailFragmentSubcomponentImpl(seedInstance);
      }
    }

    private final class BookDetailFragmentSubcomponentImpl
        implements BookDetailFragmentProvider_BindBookDetailFragment
            .BookDetailFragmentSubcomponent {
      private BookDetailFragmentSubcomponentImpl(BookDetailFragment seedInstance) {}

      private BookDetailPresenter getBookDetailPresenter() {
        return new BookDetailPresenter(DaggerAppComponent.this.bindBookRepositoryProvider.get());
      }

      @Override
      public void inject(BookDetailFragment arg0) {
        injectBookDetailFragment(arg0);
      }

      private BookDetailFragment injectBookDetailFragment(BookDetailFragment instance) {
        BaseFragment_MembersInjector.injectFragmentDispatchingAndroidInjector(
            instance,
            NavigationActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BookDetailFragment_MembersInjector.injectPresenter(instance, getBookDetailPresenter());
        return instance;
      }
    }

    private final class TicketFragmentSubcomponentBuilder
        extends TicketFragmentProvider_BindTicketFragment.TicketFragmentSubcomponent.Builder {
      private TicketFragment seedInstance;

      @Override
      public void seedInstance(TicketFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }

      @Override
      public TicketFragmentProvider_BindTicketFragment.TicketFragmentSubcomponent build() {
        Preconditions.checkBuilderRequirement(seedInstance, TicketFragment.class);
        return new TicketFragmentSubcomponentImpl(seedInstance);
      }
    }

    private final class TicketFragmentSubcomponentImpl
        implements TicketFragmentProvider_BindTicketFragment.TicketFragmentSubcomponent {
      private TicketFragmentSubcomponentImpl(TicketFragment seedInstance) {}

      @Override
      public void inject(TicketFragment arg0) {
        injectTicketFragment(arg0);
      }

      private TicketFragment injectTicketFragment(TicketFragment instance) {
        BaseFragment_MembersInjector.injectFragmentDispatchingAndroidInjector(
            instance,
            NavigationActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        TicketFragment_MembersInjector.injectPresenter(
            instance, NavigationActivitySubcomponentImpl.this.provideTicketPresenterProvider.get());
        TicketFragment_MembersInjector.injectLocalCiceroneHolder(
            instance,
            NavigationActivitySubcomponentImpl.this.provideLocalCiceroneHolderProvider.get());
        return instance;
      }
    }

    private final class TicketDetailFragmentSubcomponentBuilder
        extends TicketDetailFragmentProvider_BindTicketDetailFragment
            .TicketDetailFragmentSubcomponent.Builder {
      private TicketDetailFragment seedInstance;

      @Override
      public void seedInstance(TicketDetailFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }

      @Override
      public TicketDetailFragmentProvider_BindTicketDetailFragment.TicketDetailFragmentSubcomponent
          build() {
        Preconditions.checkBuilderRequirement(seedInstance, TicketDetailFragment.class);
        return new TicketDetailFragmentSubcomponentImpl(seedInstance);
      }
    }

    private final class TicketDetailFragmentSubcomponentImpl
        implements TicketDetailFragmentProvider_BindTicketDetailFragment
            .TicketDetailFragmentSubcomponent {
      private TicketDetailFragmentSubcomponentImpl(TicketDetailFragment seedInstance) {}

      private TicketDetailPresenter getTicketDetailPresenter() {
        return new TicketDetailPresenter(DaggerAppComponent.this.bindBookRepositoryProvider.get());
      }

      @Override
      public void inject(TicketDetailFragment arg0) {
        injectTicketDetailFragment(arg0);
      }

      private TicketDetailFragment injectTicketDetailFragment(TicketDetailFragment instance) {
        BaseFragment_MembersInjector.injectFragmentDispatchingAndroidInjector(
            instance,
            NavigationActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        TicketDetailFragment_MembersInjector.injectPresenter(instance, getTicketDetailPresenter());
        return instance;
      }
    }
  }
}
