// Generated by Dagger (https://google.github.io/dagger).
package com.clabuyakchai.staff.ui.activity.auth;

import com.clabuyakchai.staff.data.repository.AuthRepository;
import com.clabuyakchai.staff.ui.fragment.auth.code.AuthCodePresenter;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AuthActivityModule_ProvideAuthCodePresenterFactory
    implements Factory<AuthCodePresenter> {
  private final Provider<AuthRepository> authRepositoryProvider;

  public AuthActivityModule_ProvideAuthCodePresenterFactory(
      Provider<AuthRepository> authRepositoryProvider) {
    this.authRepositoryProvider = authRepositoryProvider;
  }

  @Override
  public AuthCodePresenter get() {
    return proxyProvideAuthCodePresenter(authRepositoryProvider.get());
  }

  public static AuthActivityModule_ProvideAuthCodePresenterFactory create(
      Provider<AuthRepository> authRepositoryProvider) {
    return new AuthActivityModule_ProvideAuthCodePresenterFactory(authRepositoryProvider);
  }

  public static AuthCodePresenter proxyProvideAuthCodePresenter(AuthRepository authRepository) {
    return Preconditions.checkNotNull(
        AuthActivityModule.provideAuthCodePresenter(authRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
