// Generated by Dagger (https://google.github.io/dagger).
package com.clabuyakchai.user.ui.activity.navigation;

import com.clabuyakchai.user.data.repository.HomeRepository;
import com.clabuyakchai.user.ui.fragment.navigation.bus.BusPresenter;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class NavigationActivityModule_ProvideBusPresenterFactory
    implements Factory<BusPresenter> {
  private final NavigationActivityModule module;

  private final Provider<HomeRepository> homeRepositoryProvider;

  public NavigationActivityModule_ProvideBusPresenterFactory(
      NavigationActivityModule module, Provider<HomeRepository> homeRepositoryProvider) {
    this.module = module;
    this.homeRepositoryProvider = homeRepositoryProvider;
  }

  @Override
  public BusPresenter get() {
    return proxyProvideBusPresenter(module, homeRepositoryProvider.get());
  }

  public static NavigationActivityModule_ProvideBusPresenterFactory create(
      NavigationActivityModule module, Provider<HomeRepository> homeRepositoryProvider) {
    return new NavigationActivityModule_ProvideBusPresenterFactory(module, homeRepositoryProvider);
  }

  public static BusPresenter proxyProvideBusPresenter(
      NavigationActivityModule instance, HomeRepository homeRepository) {
    return Preconditions.checkNotNull(
        instance.provideBusPresenter(homeRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
