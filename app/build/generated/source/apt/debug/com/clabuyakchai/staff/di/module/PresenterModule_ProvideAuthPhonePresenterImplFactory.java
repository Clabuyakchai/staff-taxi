// Generated by Dagger (https://google.github.io/dagger).
package com.clabuyakchai.staff.di.module;

import com.clabuyakchai.staff.data.repository.AuthRepository;
import com.clabuyakchai.staff.ui.fragment.auth.phone.AuthPhonePresenter;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class PresenterModule_ProvideAuthPhonePresenterImplFactory
    implements Factory<AuthPhonePresenter> {
  private final PresenterModule module;

  private final Provider<AuthRepository> authRepositoryProvider;

  public PresenterModule_ProvideAuthPhonePresenterImplFactory(
      PresenterModule module, Provider<AuthRepository> authRepositoryProvider) {
    this.module = module;
    this.authRepositoryProvider = authRepositoryProvider;
  }

  @Override
  public AuthPhonePresenter get() {
    return proxyProvideAuthPhonePresenterImpl(module, authRepositoryProvider.get());
  }

  public static PresenterModule_ProvideAuthPhonePresenterImplFactory create(
      PresenterModule module, Provider<AuthRepository> authRepositoryProvider) {
    return new PresenterModule_ProvideAuthPhonePresenterImplFactory(module, authRepositoryProvider);
  }

  public static AuthPhonePresenter proxyProvideAuthPhonePresenterImpl(
      PresenterModule instance, AuthRepository authRepository) {
    return Preconditions.checkNotNull(
        instance.provideAuthPhonePresenterImpl(authRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
