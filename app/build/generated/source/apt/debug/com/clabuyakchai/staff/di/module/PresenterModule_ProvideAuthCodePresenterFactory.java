// Generated by Dagger (https://google.github.io/dagger).
package com.clabuyakchai.staff.di.module;

import com.clabuyakchai.staff.data.repository.AuthRepository;
import com.clabuyakchai.staff.ui.fragment.auth.code.AuthCodePresenter;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class PresenterModule_ProvideAuthCodePresenterFactory
    implements Factory<AuthCodePresenter> {
  private final PresenterModule module;

  private final Provider<AuthRepository> authRepositoryProvider;

  public PresenterModule_ProvideAuthCodePresenterFactory(
      PresenterModule module, Provider<AuthRepository> authRepositoryProvider) {
    this.module = module;
    this.authRepositoryProvider = authRepositoryProvider;
  }

  @Override
  public AuthCodePresenter get() {
    return proxyProvideAuthCodePresenter(module, authRepositoryProvider.get());
  }

  public static PresenterModule_ProvideAuthCodePresenterFactory create(
      PresenterModule module, Provider<AuthRepository> authRepositoryProvider) {
    return new PresenterModule_ProvideAuthCodePresenterFactory(module, authRepositoryProvider);
  }

  public static AuthCodePresenter proxyProvideAuthCodePresenter(
      PresenterModule instance, AuthRepository authRepository) {
    return Preconditions.checkNotNull(
        instance.provideAuthCodePresenter(authRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
