// Generated by Dagger (https://google.github.io/dagger).
package com.clabuyakchai.staff.ui.fragment.navigation.newroute;

import com.clabuyakchai.staff.data.repository.RouteRepository;
import com.clabuyakchai.staff.data.repository.StationRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class NewRoutePresenter_Factory implements Factory<NewRoutePresenter> {
  private final Provider<StationRepository> stationRepositoryProvider;

  private final Provider<RouteRepository> routeRepositoryProvider;

  public NewRoutePresenter_Factory(
      Provider<StationRepository> stationRepositoryProvider,
      Provider<RouteRepository> routeRepositoryProvider) {
    this.stationRepositoryProvider = stationRepositoryProvider;
    this.routeRepositoryProvider = routeRepositoryProvider;
  }

  @Override
  public NewRoutePresenter get() {
    return new NewRoutePresenter(stationRepositoryProvider.get(), routeRepositoryProvider.get());
  }

  public static NewRoutePresenter_Factory create(
      Provider<StationRepository> stationRepositoryProvider,
      Provider<RouteRepository> routeRepositoryProvider) {
    return new NewRoutePresenter_Factory(stationRepositoryProvider, routeRepositoryProvider);
  }

  public static NewRoutePresenter newNewRoutePresenter(
      StationRepository stationRepository, RouteRepository routeRepository) {
    return new NewRoutePresenter(stationRepository, routeRepository);
  }
}
