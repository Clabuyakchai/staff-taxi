// Generated by Dagger (https://google.github.io/dagger).
package com.clabuyakchai.user.ui.activity.navigation;

import com.clabuyakchai.user.data.repository.RouteRepository;
import com.clabuyakchai.user.ui.fragment.navigation.routedetail.RouteDetailPresenter;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class NavigationActivityModule_ProvideRouteDetailPresenterFactory
    implements Factory<RouteDetailPresenter> {
  private final NavigationActivityModule module;

  private final Provider<RouteRepository> routeRepositoryProvider;

  public NavigationActivityModule_ProvideRouteDetailPresenterFactory(
      NavigationActivityModule module, Provider<RouteRepository> routeRepositoryProvider) {
    this.module = module;
    this.routeRepositoryProvider = routeRepositoryProvider;
  }

  @Override
  public RouteDetailPresenter get() {
    return proxyProvideRouteDetailPresenter(module, routeRepositoryProvider.get());
  }

  public static NavigationActivityModule_ProvideRouteDetailPresenterFactory create(
      NavigationActivityModule module, Provider<RouteRepository> routeRepositoryProvider) {
    return new NavigationActivityModule_ProvideRouteDetailPresenterFactory(
        module, routeRepositoryProvider);
  }

  public static RouteDetailPresenter proxyProvideRouteDetailPresenter(
      NavigationActivityModule instance, RouteRepository routeRepository) {
    return Preconditions.checkNotNull(
        instance.provideRouteDetailPresenter(routeRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
