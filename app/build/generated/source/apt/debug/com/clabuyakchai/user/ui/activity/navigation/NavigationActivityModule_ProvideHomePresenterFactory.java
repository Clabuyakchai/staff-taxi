// Generated by Dagger (https://google.github.io/dagger).
package com.clabuyakchai.user.ui.activity.navigation;

import com.clabuyakchai.user.data.repository.AuthRepository;
import com.clabuyakchai.user.data.repository.HomeRepository;
import com.clabuyakchai.user.ui.fragment.navigation.home.HomePresenter;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class NavigationActivityModule_ProvideHomePresenterFactory
    implements Factory<HomePresenter> {
  private final NavigationActivityModule module;

  private final Provider<AuthRepository> authRepositoryProvider;

  private final Provider<HomeRepository> homeRepositoryProvider;

  public NavigationActivityModule_ProvideHomePresenterFactory(
      NavigationActivityModule module,
      Provider<AuthRepository> authRepositoryProvider,
      Provider<HomeRepository> homeRepositoryProvider) {
    this.module = module;
    this.authRepositoryProvider = authRepositoryProvider;
    this.homeRepositoryProvider = homeRepositoryProvider;
  }

  @Override
  public HomePresenter get() {
    return proxyProvideHomePresenter(
        module, authRepositoryProvider.get(), homeRepositoryProvider.get());
  }

  public static NavigationActivityModule_ProvideHomePresenterFactory create(
      NavigationActivityModule module,
      Provider<AuthRepository> authRepositoryProvider,
      Provider<HomeRepository> homeRepositoryProvider) {
    return new NavigationActivityModule_ProvideHomePresenterFactory(
        module, authRepositoryProvider, homeRepositoryProvider);
  }

  public static HomePresenter proxyProvideHomePresenter(
      NavigationActivityModule instance,
      AuthRepository authRepository,
      HomeRepository homeRepository) {
    return Preconditions.checkNotNull(
        instance.provideHomePresenter(authRepository, homeRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
