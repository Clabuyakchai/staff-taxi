// Generated by Dagger (https://google.github.io/dagger).
package com.clabuyakchai.staff.di.component;

import android.app.Activity;
import android.app.Fragment;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import com.clabuyakchai.staff.App;
import com.clabuyakchai.staff.data.remote.StaffApi;
import com.clabuyakchai.staff.data.repository.AuthRepository;
import com.clabuyakchai.staff.data.repository.Impl.AuthRepositoryImpl;
import com.clabuyakchai.staff.data.repository.Impl.AuthRepositoryImpl_Factory;
import com.clabuyakchai.staff.di.module.ActivityModule_BindLoginActivity;
import com.clabuyakchai.staff.di.module.ActivityModule_BindNavActivity;
import com.clabuyakchai.staff.di.module.FirebaseModule;
import com.clabuyakchai.staff.di.module.FirebaseModule_ProvideFirebaseAuthFactory;
import com.clabuyakchai.staff.di.module.FirebaseModule_ProvidePhoneAuthProviderFactory;
import com.clabuyakchai.staff.di.module.PresenterModule;
import com.clabuyakchai.staff.di.module.PresenterModule_ProvideAuthCodePresenterFactory;
import com.clabuyakchai.staff.di.module.PresenterModule_ProvideAuthPhonePresenterImplFactory;
import com.clabuyakchai.staff.di.module.PresenterModule_ProvideRegistrationPresenterFactory;
import com.clabuyakchai.staff.di.module.RemoteModule;
import com.clabuyakchai.staff.di.module.RemoteModule_ProvideOkHttpClientFactory;
import com.clabuyakchai.staff.di.module.RemoteModule_ProvideRetrofitFactory;
import com.clabuyakchai.staff.di.module.RemoteModule_ProvideStaffApiFactory;
import com.clabuyakchai.staff.ui.activity.FragmentStack;
import com.clabuyakchai.staff.ui.activity.auth.AuthActivity;
import com.clabuyakchai.staff.ui.activity.nav.NavActivity;
import com.clabuyakchai.staff.ui.base.BaseFragment_MembersInjector;
import com.clabuyakchai.staff.ui.fragment.auth.code.AuthCodeFragment;
import com.clabuyakchai.staff.ui.fragment.auth.code.AuthCodeFragmentProvider_BindAuthCodeFragment;
import com.clabuyakchai.staff.ui.fragment.auth.code.AuthCodeFragment_MembersInjector;
import com.clabuyakchai.staff.ui.fragment.auth.code.AuthCodePresenter;
import com.clabuyakchai.staff.ui.fragment.auth.phone.AuthPhoneFragment;
import com.clabuyakchai.staff.ui.fragment.auth.phone.AuthPhoneFragmentProvider_BindLoginFragment;
import com.clabuyakchai.staff.ui.fragment.auth.phone.AuthPhoneFragment_MembersInjector;
import com.clabuyakchai.staff.ui.fragment.auth.phone.AuthPhonePresenter;
import com.clabuyakchai.staff.ui.fragment.auth.registration.RegistrationFragment;
import com.clabuyakchai.staff.ui.fragment.auth.registration.RegistrationFragmentProvider_BindRegistrationFragment;
import com.clabuyakchai.staff.ui.fragment.auth.registration.RegistrationFragment_MembersInjector;
import com.clabuyakchai.staff.ui.fragment.auth.registration.RegistrationPresenter;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.PhoneAuthProvider;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityModule_BindLoginActivity.AuthActivitySubcomponent.Builder>
      authActivitySubcomponentBuilderProvider;

  private Provider<ActivityModule_BindNavActivity.NavActivitySubcomponent.Builder>
      navActivitySubcomponentBuilderProvider;

  private Provider<FirebaseAuth> provideFirebaseAuthProvider;

  private Provider<PhoneAuthProvider> providePhoneAuthProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<StaffApi> provideStaffApiProvider;

  private Provider<AuthRepositoryImpl> authRepositoryImplProvider;

  private Provider<AuthRepository> provideAuthRepositoryProvider;

  private Provider<AuthPhonePresenter> provideAuthPhonePresenterImplProvider;

  private Provider<AuthCodePresenter> provideAuthCodePresenterProvider;

  private Provider<RegistrationPresenter> provideRegistrationPresenterProvider;

  private DaggerAppComponent(
      PresenterModule presenterModuleParam,
      FirebaseModule firebaseModuleParam,
      RemoteModule remoteModuleParam,
      App seedInstance) {

    initialize(presenterModuleParam, firebaseModuleParam, remoteModuleParam, seedInstance);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(2)
        .put(AuthActivity.class, (Provider) authActivitySubcomponentBuilderProvider)
        .put(NavActivity.class, (Provider) navActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
      getDispatchingAndroidInjectorOfFragment2() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(
      final PresenterModule presenterModuleParam,
      final FirebaseModule firebaseModuleParam,
      final RemoteModule remoteModuleParam,
      final App seedInstance) {
    this.authActivitySubcomponentBuilderProvider =
        new Provider<ActivityModule_BindLoginActivity.AuthActivitySubcomponent.Builder>() {
          @Override
          public ActivityModule_BindLoginActivity.AuthActivitySubcomponent.Builder get() {
            return new AuthActivitySubcomponentBuilder();
          }
        };
    this.navActivitySubcomponentBuilderProvider =
        new Provider<ActivityModule_BindNavActivity.NavActivitySubcomponent.Builder>() {
          @Override
          public ActivityModule_BindNavActivity.NavActivitySubcomponent.Builder get() {
            return new NavActivitySubcomponentBuilder();
          }
        };
    this.provideFirebaseAuthProvider =
        DoubleCheck.provider(FirebaseModule_ProvideFirebaseAuthFactory.create(firebaseModuleParam));
    this.providePhoneAuthProvider =
        DoubleCheck.provider(
            FirebaseModule_ProvidePhoneAuthProviderFactory.create(firebaseModuleParam));
    this.provideOkHttpClientProvider =
        DoubleCheck.provider(RemoteModule_ProvideOkHttpClientFactory.create(remoteModuleParam));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            RemoteModule_ProvideRetrofitFactory.create(
                remoteModuleParam, provideOkHttpClientProvider));
    this.provideStaffApiProvider =
        DoubleCheck.provider(
            RemoteModule_ProvideStaffApiFactory.create(remoteModuleParam, provideRetrofitProvider));
    this.authRepositoryImplProvider =
        AuthRepositoryImpl_Factory.create(
            provideFirebaseAuthProvider, providePhoneAuthProvider, provideStaffApiProvider);
    this.provideAuthRepositoryProvider =
        DoubleCheck.provider((Provider) authRepositoryImplProvider);
    this.provideAuthPhonePresenterImplProvider =
        DoubleCheck.provider(
            PresenterModule_ProvideAuthPhonePresenterImplFactory.create(
                presenterModuleParam, provideAuthRepositoryProvider));
    this.provideAuthCodePresenterProvider =
        DoubleCheck.provider(
            PresenterModule_ProvideAuthCodePresenterFactory.create(
                presenterModuleParam, provideAuthRepositoryProvider));
    this.provideRegistrationPresenterProvider =
        DoubleCheck.provider(
            PresenterModule_ProvideRegistrationPresenterFactory.create(
                presenterModuleParam, provideAuthRepositoryProvider));
  }

  @Override
  public void inject(App arg0) {
    injectApp(arg0);
  }

  private App injectApp(App instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    dagger.android.support.DaggerApplication_MembersInjector.injectSupportFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment2());
    return instance;
  }

  private static final class Builder extends AppComponent.Builder {
    private PresenterModule presenterModule;

    private FirebaseModule firebaseModule;

    private RemoteModule remoteModule;

    private App seedInstance;

    @Override
    public void seedInstance(App arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public AppComponent build() {
      if (presenterModule == null) {
        this.presenterModule = new PresenterModule();
      }
      if (firebaseModule == null) {
        this.firebaseModule = new FirebaseModule();
      }
      if (remoteModule == null) {
        this.remoteModule = new RemoteModule();
      }
      Preconditions.checkBuilderRequirement(seedInstance, App.class);
      return new DaggerAppComponent(presenterModule, firebaseModule, remoteModule, seedInstance);
    }
  }

  private final class AuthActivitySubcomponentBuilder
      extends ActivityModule_BindLoginActivity.AuthActivitySubcomponent.Builder {
    private AuthActivity seedInstance;

    @Override
    public void seedInstance(AuthActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public ActivityModule_BindLoginActivity.AuthActivitySubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, AuthActivity.class);
      return new AuthActivitySubcomponentImpl(seedInstance);
    }
  }

  private final class AuthActivitySubcomponentImpl
      implements ActivityModule_BindLoginActivity.AuthActivitySubcomponent {
    private Provider<
            AuthPhoneFragmentProvider_BindLoginFragment.AuthPhoneFragmentSubcomponent.Builder>
        authPhoneFragmentSubcomponentBuilderProvider;

    private Provider<
            AuthCodeFragmentProvider_BindAuthCodeFragment.AuthCodeFragmentSubcomponent.Builder>
        authCodeFragmentSubcomponentBuilderProvider;

    private Provider<
            RegistrationFragmentProvider_BindRegistrationFragment.RegistrationFragmentSubcomponent
                .Builder>
        registrationFragmentSubcomponentBuilderProvider;

    private Provider<AuthActivity> seedInstanceProvider;

    private Provider<FragmentStack> bindFragmentStackProvider;

    private AuthActivitySubcomponentImpl(AuthActivity seedInstanceParam) {

      initialize(seedInstanceParam);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(5)
          .put(
              AuthActivity.class,
              (Provider) DaggerAppComponent.this.authActivitySubcomponentBuilderProvider)
          .put(
              NavActivity.class,
              (Provider) DaggerAppComponent.this.navActivitySubcomponentBuilderProvider)
          .put(AuthPhoneFragment.class, (Provider) authPhoneFragmentSubcomponentBuilderProvider)
          .put(AuthCodeFragment.class, (Provider) authCodeFragmentSubcomponentBuilderProvider)
          .put(
              RegistrationFragment.class,
              (Provider) registrationFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment2() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AuthActivity seedInstanceParam) {
      this.authPhoneFragmentSubcomponentBuilderProvider =
          new Provider<
              AuthPhoneFragmentProvider_BindLoginFragment.AuthPhoneFragmentSubcomponent.Builder>() {
            @Override
            public AuthPhoneFragmentProvider_BindLoginFragment.AuthPhoneFragmentSubcomponent.Builder
                get() {
              return new AuthPhoneFragmentSubcomponentBuilder();
            }
          };
      this.authCodeFragmentSubcomponentBuilderProvider =
          new Provider<
              AuthCodeFragmentProvider_BindAuthCodeFragment.AuthCodeFragmentSubcomponent
                  .Builder>() {
            @Override
            public AuthCodeFragmentProvider_BindAuthCodeFragment.AuthCodeFragmentSubcomponent
                    .Builder
                get() {
              return new AuthCodeFragmentSubcomponentBuilder();
            }
          };
      this.registrationFragmentSubcomponentBuilderProvider =
          new Provider<
              RegistrationFragmentProvider_BindRegistrationFragment.RegistrationFragmentSubcomponent
                  .Builder>() {
            @Override
            public RegistrationFragmentProvider_BindRegistrationFragment
                    .RegistrationFragmentSubcomponent.Builder
                get() {
              return new RegistrationFragmentSubcomponentBuilder();
            }
          };
      this.seedInstanceProvider = InstanceFactory.create(seedInstanceParam);
      this.bindFragmentStackProvider = DoubleCheck.provider((Provider) seedInstanceProvider);
    }

    @Override
    public void inject(AuthActivity arg0) {
      injectAuthActivity(arg0);
    }

    private AuthActivity injectAuthActivity(AuthActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment2());
      return instance;
    }

    private final class AuthPhoneFragmentSubcomponentBuilder
        extends AuthPhoneFragmentProvider_BindLoginFragment.AuthPhoneFragmentSubcomponent.Builder {
      private AuthPhoneFragment seedInstance;

      @Override
      public void seedInstance(AuthPhoneFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }

      @Override
      public AuthPhoneFragmentProvider_BindLoginFragment.AuthPhoneFragmentSubcomponent build() {
        Preconditions.checkBuilderRequirement(seedInstance, AuthPhoneFragment.class);
        return new AuthPhoneFragmentSubcomponentImpl(seedInstance);
      }
    }

    private final class AuthPhoneFragmentSubcomponentImpl
        implements AuthPhoneFragmentProvider_BindLoginFragment.AuthPhoneFragmentSubcomponent {
      private AuthPhoneFragmentSubcomponentImpl(AuthPhoneFragment seedInstance) {}

      @Override
      public void inject(AuthPhoneFragment arg0) {
        injectAuthPhoneFragment(arg0);
      }

      private AuthPhoneFragment injectAuthPhoneFragment(AuthPhoneFragment instance) {
        BaseFragment_MembersInjector.injectFragmentDispatchingAndroidInjector(
            instance, AuthActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        AuthPhoneFragment_MembersInjector.injectPresenter(
            instance, DaggerAppComponent.this.provideAuthPhonePresenterImplProvider.get());
        AuthPhoneFragment_MembersInjector.injectFragmentStack(
            instance, AuthActivitySubcomponentImpl.this.bindFragmentStackProvider.get());
        return instance;
      }
    }

    private final class AuthCodeFragmentSubcomponentBuilder
        extends AuthCodeFragmentProvider_BindAuthCodeFragment.AuthCodeFragmentSubcomponent.Builder {
      private AuthCodeFragment seedInstance;

      @Override
      public void seedInstance(AuthCodeFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }

      @Override
      public AuthCodeFragmentProvider_BindAuthCodeFragment.AuthCodeFragmentSubcomponent build() {
        Preconditions.checkBuilderRequirement(seedInstance, AuthCodeFragment.class);
        return new AuthCodeFragmentSubcomponentImpl(seedInstance);
      }
    }

    private final class AuthCodeFragmentSubcomponentImpl
        implements AuthCodeFragmentProvider_BindAuthCodeFragment.AuthCodeFragmentSubcomponent {
      private AuthCodeFragmentSubcomponentImpl(AuthCodeFragment seedInstance) {}

      @Override
      public void inject(AuthCodeFragment arg0) {
        injectAuthCodeFragment(arg0);
      }

      private AuthCodeFragment injectAuthCodeFragment(AuthCodeFragment instance) {
        BaseFragment_MembersInjector.injectFragmentDispatchingAndroidInjector(
            instance, AuthActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        AuthCodeFragment_MembersInjector.injectPresenter(
            instance, DaggerAppComponent.this.provideAuthCodePresenterProvider.get());
        AuthCodeFragment_MembersInjector.injectFragmentStack(
            instance, AuthActivitySubcomponentImpl.this.bindFragmentStackProvider.get());
        return instance;
      }
    }

    private final class RegistrationFragmentSubcomponentBuilder
        extends RegistrationFragmentProvider_BindRegistrationFragment
            .RegistrationFragmentSubcomponent.Builder {
      private RegistrationFragment seedInstance;

      @Override
      public void seedInstance(RegistrationFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }

      @Override
      public RegistrationFragmentProvider_BindRegistrationFragment.RegistrationFragmentSubcomponent
          build() {
        Preconditions.checkBuilderRequirement(seedInstance, RegistrationFragment.class);
        return new RegistrationFragmentSubcomponentImpl(seedInstance);
      }
    }

    private final class RegistrationFragmentSubcomponentImpl
        implements RegistrationFragmentProvider_BindRegistrationFragment
            .RegistrationFragmentSubcomponent {
      private RegistrationFragmentSubcomponentImpl(RegistrationFragment seedInstance) {}

      @Override
      public void inject(RegistrationFragment arg0) {
        injectRegistrationFragment(arg0);
      }

      private RegistrationFragment injectRegistrationFragment(RegistrationFragment instance) {
        BaseFragment_MembersInjector.injectFragmentDispatchingAndroidInjector(
            instance, AuthActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        RegistrationFragment_MembersInjector.injectPresenter(
            instance, DaggerAppComponent.this.provideRegistrationPresenterProvider.get());
        return instance;
      }
    }
  }

  private final class NavActivitySubcomponentBuilder
      extends ActivityModule_BindNavActivity.NavActivitySubcomponent.Builder {
    private NavActivity seedInstance;

    @Override
    public void seedInstance(NavActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public ActivityModule_BindNavActivity.NavActivitySubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, NavActivity.class);
      return new NavActivitySubcomponentImpl(seedInstance);
    }
  }

  private final class NavActivitySubcomponentImpl
      implements ActivityModule_BindNavActivity.NavActivitySubcomponent {
    private NavActivitySubcomponentImpl(NavActivity seedInstance) {}

    @Override
    public void inject(NavActivity arg0) {
      injectNavActivity(arg0);
    }

    private NavActivity injectNavActivity(NavActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment2());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      return instance;
    }
  }
}
