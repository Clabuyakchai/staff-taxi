// Generated by Dagger (https://google.github.io/dagger).
package com.clabuyakchai.staff.ui.activity.auth;

import com.clabuyakchai.staff.data.repository.AuthRepository;
import com.clabuyakchai.staff.ui.fragment.auth.registration.RegistrationPresenter;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AuthActivityModule_ProvideRegistrationPresenterFactory
    implements Factory<RegistrationPresenter> {
  private final Provider<AuthRepository> authRepositoryProvider;

  public AuthActivityModule_ProvideRegistrationPresenterFactory(
      Provider<AuthRepository> authRepositoryProvider) {
    this.authRepositoryProvider = authRepositoryProvider;
  }

  @Override
  public RegistrationPresenter get() {
    return proxyProvideRegistrationPresenter(authRepositoryProvider.get());
  }

  public static AuthActivityModule_ProvideRegistrationPresenterFactory create(
      Provider<AuthRepository> authRepositoryProvider) {
    return new AuthActivityModule_ProvideRegistrationPresenterFactory(authRepositoryProvider);
  }

  public static RegistrationPresenter proxyProvideRegistrationPresenter(
      AuthRepository authRepository) {
    return Preconditions.checkNotNull(
        AuthActivityModule.provideRegistrationPresenter(authRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
